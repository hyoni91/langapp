generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  locale      String   @default("ja")
  createdAt   DateTime @default(now())
  firebaseUid String   @unique

  images           Image[]
  timeLimitSetting TimeLimitSetting?
  events           StudyEvent[]
  sessions         StudySession[]
  words            Word[]
  tags             Tag[]

  @@index([firebaseUid])
}

model Image {
  id          String   @id @default(cuid())
  imageUrl    String
  storagePath String   @unique
  contentType String?
  createdAt   DateTime @default(now())
  userId      String

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  word Word?
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  userId    String

  words Word[] @relation("WordTags")
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name]) // 같은 유저 내에서만 중복 방지
}

model Word {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  jaSurface String
  koSurface String
  imageId   String?    @unique
  status    WordStatus @default(draft)
  userId    String

  studyEvent StudyEvent[]
  tags       Tag[]        @relation("WordTags")
  image      Image?       @relation(fields: [imageId], references: [id])
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jaSurface])
  @@unique([userId, koSurface])
  @@index([userId, status, createdAt])
}

model StudySession {
  id          String    @id @default(cuid())
  userId      String
  startedAt   DateTime
  endedAt     DateTime?
  durationSec Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startedAt])
}

model StudyEvent {
  id             String      @id @default(cuid())
  userId         String
  wordId         String
  action         StudyAction
  lang           Lang
  selectedWordId String?
  responseMs     Int?
  createdAt      DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)
}

model TimeLimitSetting {
  id                String   @id @default(cuid())
  userId            String   @unique
  minutesPerSession Int      @default(20) // 「20分」デフォルト
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum WordStatus {
  draft
  published
}

enum StudyAction {
  open
  tts
  quiz_start
  quiz_answer_ok
  quiz_answer_ng
  quiz_end
}

enum Lang {
  ja
  ko
}
